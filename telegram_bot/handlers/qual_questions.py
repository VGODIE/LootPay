from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from ..states import QualificationStates

router = Router()

# Create welcome keyboard
welcome_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="start_qualification"),
        ],
        [
            InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/lootpay_support_bot"),
        ]
    ]
)

# Create keyboard for platform selection
platform_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="Steam", callback_data="platform_steam"),
            InlineKeyboardButton(text="Epic Games", callback_data="platform_epic"),
        ],
        [
            InlineKeyboardButton(text="–ö–æ–Ω—Å–æ–ª–∏", callback_data="platform_console"),
            InlineKeyboardButton(text="–ù–µ –∏–≥—Ä–∞—é", callback_data="platform_none"),
        ]
    ]
)

# Create keyboard for game type selection
game_type_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–û–Ω–ª–∞–π–Ω", callback_data="game_online"),
            InlineKeyboardButton(text="–û—Ñ—Ñ–ª–∞–π–Ω", callback_data="game_offline"),
        ],
        [
            InlineKeyboardButton(text="–ù–µ –∏–≥—Ä–∞—é", callback_data="game_none"),
        ]
    ]
)

# Create keyboard for payment preference
payment_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü–ª–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã", callback_data="payment_paid"),
            InlineKeyboardButton(text="–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã", callback_data="payment_free"),
        ],
        [
            InlineKeyboardButton(text="–ò —Ç–µ, –∏ –¥—Ä—É–≥–∏–µ", callback_data="payment_both"),
        ]
    ]
)

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """Handle the /start command and show welcome message"""
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ LootPay!\n"
        "–ë–æ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏ –Ω–∞–¥—ë–∂–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è Steam‚Äë–∫–æ—à–µ–ª—å–∫–∞ üöÄ\n\n"
        "–õ–µ–≥–∫–æ –ø–æ–ø–æ–ª–Ω—è–π Steam –∑–∞ 15 –º–∏–Ω—É—Ç —Å —É–¥–æ–±–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π, —á–µ—Å—Ç–Ω—ã–º –∫—É—Ä—Å–æ–º –∏ –±–µ–∑ —Ä–∏—Å–∫–∞ –±—ã—Ç—å –æ–±–º–∞–Ω—É—Ç—ã–º ‚è±Ô∏è\n\n"
        "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è, –±–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –Ω–∞—Ü–µ–Ω–æ–∫\n"
        "‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏ —Å–±–æ—è—Ö\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n"
        "‚Ä¢ –°–∫–æ—Ä–æ: –∫—ç—à–±—ç–∫ –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n\n"
        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –æ—Ç 100 ‚ÇΩ –ª—é–±—ã–º–∏ –†–§‚Äë–∫–∞—Ä—Ç–∞–º–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ –°–ë–ü.\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞ ‚Äî @lootpay_support_bot.\n\n"
        "–ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –∏–≥—Ä–∞–º–∏ –≤ Steam –≤–º–µ—Å—Ç–µ —Å LootPay! üéÆ"
    )
    await message.answer(welcome_text, reply_markup=welcome_keyboard)

@router.callback_query(F.data == "start_qualification")
async def start_qualification(callback: CallbackQuery, state: FSMContext):
    """Start the qualification process when user clicks '–ù–∞—á–∞—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ'"""
    await callback.message.edit_text(
        "–ì–¥–µ —Ç—ã –∏–≥—Ä–∞–µ—à—å —á–∞—â–µ –≤—Å–µ–≥–æ?",
        reply_markup=platform_keyboard
    )
    await state.set_state(QualificationStates.waiting_for_platform)

@router.callback_query(QualificationStates.waiting_for_platform)
async def process_platform(callback: CallbackQuery, state: FSMContext):
    """Process user's gaming platform response"""
    platform = callback.data.split('_')[1]
    
    if platform != "steam":
        await callback.message.edit_text("–ù–∞—à –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Steam. –£–¥–∞—á–∏!")
        await state.clear()
        return
    
    await callback.message.edit_text(
        "–ö–∞–∫–∏–µ –∏–≥—Ä—ã —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å?",
        reply_markup=game_type_keyboard
    )
    await state.set_state(QualificationStates.waiting_for_game_type)

@router.callback_query(QualificationStates.waiting_for_game_type)
async def process_game_type(callback: CallbackQuery, state: FSMContext):
    """Process user's game type preference"""
    await callback.message.edit_text(
        "–¢—ã –ø–æ–∫—É–ø–∞–µ—à—å –ø–ª–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã –∏–ª–∏ –∏–≥—Ä–∞–µ—à—å —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ?",
        reply_markup=payment_keyboard
    )
    await state.set_state(QualificationStates.waiting_for_payment_preference)

@router.callback_query(QualificationStates.waiting_for_payment_preference)
async def process_payment_preference(callback: CallbackQuery, state: FSMContext):
    """Process user's payment preference"""
    payment_type = callback.data.split('_')[1]
    
    if payment_type == "free":
        await callback.message.edit_text("–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–ª–µ–∑–µ–Ω —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –ø–æ–∫—É–ø–∞–µ—Ç –ø–ª–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã. –£–¥–∞—á–∏!")
    else:
        await callback.message.edit_text("–ö—Ä—É—Ç–æ, —Ç—ã –Ω–∞—à —á–µ–ª–æ–≤–µ–∫! –°–∫–æ—Ä–æ –Ω–∞—á–Ω—ë–º.")
    
    await state.clear() 